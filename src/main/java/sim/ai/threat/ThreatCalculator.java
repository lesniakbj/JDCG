package sim.ai.threat;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import sim.domain.unit.UnitGroup;
import sim.domain.unit.air.AirUnit;
import sim.domain.unit.air.Mission;
import sim.domain.unit.global.Airfield;
import sim.domain.unit.ground.ArmedShipGroundUnit;
import sim.domain.unit.ground.ArmorGroundUnit;
import sim.domain.unit.ground.ArtilleryGroundUnit;
import sim.domain.unit.ground.GroundUnit;
import sim.domain.unit.ground.UnarmedGroundUnit;
import sim.domain.unit.ground.UnarmedShipGroundUnit;
import sim.domain.unit.ground.defence.AirDefenceUnit;
import sim.domain.unit.ground.defence.ArtilleryAirDefenceUnit;
import sim.domain.unit.ground.defence.MissileAirDefenceUnit;
import sim.manager.CoalitionManager;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class ThreatCalculator {
    private static final Logger log = LogManager.getLogger(ThreatCalculator.class);

    public double calculateThreatLevel(ThreatGridCell cell, CoalitionManager friendlyCoalition, CoalitionManager enemyCoalition) {
        double threat = 0.0;
        double maxThreatLevel = 1.0;
        double minThreatLevel = -1.0;

        // Calculate Airfield Threat Levels, this includes stationed aircraft and their structures
        threat = calculateAirfieldThreat(friendlyCoalition.getCoalitionPointDefenceGroundUnits(),  cell, threat, .20, .0015, true);
        threat = calculateAirfieldThreat(enemyCoalition.getCoalitionPointDefenceGroundUnits(), cell, threat,.20, .0015,false);

        // Calculate Ground Unit Threat Levels, this includes any of the ships or other
        // frontline troops that get generated by the generator
        threat = calculateGroundUnitThreat(friendlyCoalition.getCoalitionFrontlineGroups(), cell, threat, .0015, true);
        threat = calculateGroundUnitThreat(enemyCoalition.getCoalitionFrontlineGroups(), cell, threat, .0015, false);

        // Calculate Air Defence Threat Levels
        threat = calculateAirDefenceThreat(friendlyCoalition.getCoalitionAirDefences(), cell, threat, .05, true);
        threat = calculateAirDefenceThreat(enemyCoalition.getCoalitionAirDefences(), cell, threat, .05, false);

        // Calculate Threats of Aircraft (heaviest level of threat, as they are the only ones who can reduce score)
        threat = calculateAirThreat(friendlyCoalition.getCoalitionMissionManager().getPlannedMissions(), cell, threat, .40, true);
        threat = calculateAirThreat(enemyCoalition.getCoalitionMissionManager().getPlannedMissions(), cell, threat, .40, false);

        if(threat < 0) {
            return Math.max(minThreatLevel, threat);
        } else {
            return Math.min(maxThreatLevel, threat);
        }
    }

    private double calculateAirThreat(List<Mission> plannedMissions, ThreatGridCell cell, double currentThreat, double threatForAircraftGroup, boolean isFriendly) {
        List<UnitGroup<AirUnit>> airGroupsInProgress = plannedMissions.stream().map(Mission::getMissionAircraft).collect(Collectors.toList());
        for(UnitGroup<AirUnit> airUnitGroup : airGroupsInProgress) {
            if (cell.contains(airUnitGroup.getMapXLocation(), airUnitGroup.getMapYLocation())) {
                // For each aircraft group, add the base threat
                currentThreat += threatForAircraftGroup * (isFriendly ? 1 : -1);
            }
        }
        return currentThreat;
    }

    private double calculateAirDefenceThreat(List<UnitGroup<AirDefenceUnit>> coalitionAirDefences, ThreatGridCell cell, double currentThreat, double threatForAirDefence, boolean isFriendly) {
        for(UnitGroup<AirDefenceUnit> g : coalitionAirDefences) {
            if (cell.contains(g.getMapXLocation(), g.getMapYLocation())) {
                AirDefenceUnit u = g.getGroupUnits().get(0);
                // Add the default threat amount for encountering an enemy airfield
                currentThreat += calculateAirDefenceUnitThreat(u, threatForAirDefence) * (isFriendly ? 1 : -1);
            }
        }
        return currentThreat;
    }

    private double calculateAirfieldThreat(Map<Airfield, List<UnitGroup<GroundUnit>>> coalitionPointDefenceGroundUnits, ThreatGridCell cell, double currentThreat, double threatForAirfield, double threatForGroundUnits, boolean isFriendly) {
        for(Airfield airfield : coalitionPointDefenceGroundUnits.keySet()) {
            if(cell.contains(airfield.getAirfieldType().getAirfieldMapPosition())) {
                // Add the default threat amount for encountering an enemy airfield
                currentThreat += threatForAirfield * (isFriendly ? 1 : -1);

                // See how many structures the airfield has
                currentThreat += (airfield.getCriticalStructures().size() / 100.0) * (isFriendly ? 1 : -1);

                // See how many aircraft the airfield has
                currentThreat += (airfield.getStationedAircraft().size() / 100.0) * (isFriendly ? 1 : -1);

                // Add the threat level of the troops stationed at that airfield
                calculateGroundUnitThreat(coalitionPointDefenceGroundUnits.get(airfield), cell, currentThreat, threatForGroundUnits, isFriendly);
            }
        }
        return currentThreat;
    }

    private double calculateGroundUnitThreat(List<UnitGroup<GroundUnit>> groundUnits, ThreatGridCell cell, double currentThreat, double threatForGroundUnits, boolean isFriendly) {
        for(UnitGroup<GroundUnit> g : groundUnits) {
            if(cell.contains(g.getMapXLocation(), g.getMapYLocation())) {
                for (GroundUnit u : g.getGroupUnits()) {
                    // Add the default threat amount for encountering an enemy airfield
                    currentThreat += calculateUnitThreat(u, threatForGroundUnits) * (isFriendly ? 1 : -1);
                }
            }
        }
        return currentThreat;
    }

    private double calculateUnitThreat(GroundUnit u, double baseThreat) {
        double unitThreat = baseThreat;

        if (u.getClass().isAssignableFrom(ArmedShipGroundUnit.class)) {
            unitThreat = baseThreat * 20;
        }

        if (u.getClass().isAssignableFrom(ArmorGroundUnit.class)) {
            unitThreat = baseThreat * 10;
        }

        if (u.getClass().isAssignableFrom(ArtilleryGroundUnit.class)) {
            unitThreat = baseThreat * 5;
        }

        if (u.getClass().isAssignableFrom(UnarmedGroundUnit.class) || u.getClass().isAssignableFrom(UnarmedShipGroundUnit.class)) {
            unitThreat = baseThreat;
        }

        return unitThreat;
    }

    private double calculateAirDefenceUnitThreat(AirDefenceUnit u, double baseThreat) {
        double unitThreat = baseThreat;

        if (u.getClass().isAssignableFrom(MissileAirDefenceUnit.class)) {
            unitThreat = baseThreat * 2.5;
        }

        if (u.getClass().isAssignableFrom(ArtilleryAirDefenceUnit.class)) {
            unitThreat = baseThreat;
        }

        return unitThreat;
    }
}
